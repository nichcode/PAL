
#ifndef _PAL_INPUT_H
#define _PAL_INPUT_H

#include "pal_event.h"

typedef enum {
    PAL_SCANCODE_UNKNOWN = 0,

    // Letters
    PAL_SCANCODE_A,
    PAL_SCANCODE_B,
    PAL_SCANCODE_C,
    PAL_SCANCODE_D,
    PAL_SCANCODE_E,
    PAL_SCANCODE_F,
    PAL_SCANCODE_G,
    PAL_SCANCODE_H,
    PAL_SCANCODE_I,
    PAL_SCANCODE_J,
    PAL_SCANCODE_K,
    PAL_SCANCODE_L,
    PAL_SCANCODE_M,
    PAL_SCANCODE_N,
    PAL_SCANCODE_O,
    PAL_SCANCODE_P,
    PAL_SCANCODE_Q,
    PAL_SCANCODE_R,
    PAL_SCANCODE_S,
    PAL_SCANCODE_T,
    PAL_SCANCODE_U,
    PAL_SCANCODE_V,
    PAL_SCANCODE_W,
    PAL_SCANCODE_X,
    PAL_SCANCODE_Y,
    PAL_SCANCODE_Z,

    // Numbers (top row)
    PAL_SCANCODE_0,
    PAL_SCANCODE_1,
    PAL_SCANCODE_2,
    PAL_SCANCODE_3,
    PAL_SCANCODE_4,
    PAL_SCANCODE_5,
    PAL_SCANCODE_6,
    PAL_SCANCODE_7,
    PAL_SCANCODE_8,
    PAL_SCANCODE_9,

    // Function
    PAL_SCANCODE_F1,
    PAL_SCANCODE_F2,
    PAL_SCANCODE_F3,
    PAL_SCANCODE_F4,
    PAL_SCANCODE_F5,
    PAL_SCANCODE_F6,
    PAL_SCANCODE_F7,
    PAL_SCANCODE_F8,
    PAL_SCANCODE_F9,
    PAL_SCANCODE_F10,
    PAL_SCANCODE_F11,
    PAL_SCANCODE_F12,

    // Control
    PAL_SCANCODE_ESCAPE,
    PAL_SCANCODE_ENTER,
    PAL_SCANCODE_TAB,
    PAL_SCANCODE_BACKSPACE,
    PAL_SCANCODE_SPACE,
    PAL_SCANCODE_CAPSLOCK,
    PAL_SCANCODE_NUMLOCK,
    PAL_SCANCODE_SCROLLLOCK,
    PAL_SCANCODE_LSHIFT,
    PAL_SCANCODE_RSHIFT,
    PAL_SCANCODE_LCTRL,
    PAL_SCANCODE_RCTRL,
    PAL_SCANCODE_LALT,
    PAL_SCANCODE_RALT,

    // Arrows
    PAL_SCANCODE_LEFT,
    PAL_SCANCODE_RIGHT,
    PAL_SCANCODE_UP,
    PAL_SCANCODE_DOWN,

    // Navigation
    PAL_SCANCODE_INSERT,
    PAL_SCANCODE_DELETE,
    PAL_SCANCODE_HOME,
    PAL_SCANCODE_END,
    PAL_SCANCODE_PAGEUP,
    PAL_SCANCODE_PAGEDOWN,

    // Keypad
    PAL_SCANCODE_KP_0,
    PAL_SCANCODE_KP_1,
    PAL_SCANCODE_KP_2,
    PAL_SCANCODE_KP_3,
    PAL_SCANCODE_KP_4,
    PAL_SCANCODE_KP_5,
    PAL_SCANCODE_KP_6,
    PAL_SCANCODE_KP_7,
    PAL_SCANCODE_KP_8,
    PAL_SCANCODE_KP_9,
    PAL_SCANCODE_KP_ENTER,
    PAL_SCANCODE_KP_ADD,
    PAL_SCANCODE_KP_SUBTRACT,
    PAL_SCANCODE_KP_MULTIPLY,
    PAL_SCANCODE_KP_DIVIDE,
    PAL_SCANCODE_KP_DECIMAL,
    PAL_SCANCODE_KP_EQUAL,

    // Misc
    PAL_SCANCODE_PRINTSCREEN,
    PAL_SCANCODE_PAUSE,
    PAL_SCANCODE_MENU,
    PAL_SCANCODE_APOSTROPHE,
    PAL_SCANCODE_BACKSLASH,
    PAL_SCANCODE_COMMA,
    PAL_SCANCODE_EQUAL,
    PAL_SCANCODE_GRAVEACCENT,
    PAL_SCANCODE_SUBTRACT,
    PAL_SCANCODE_PERIOD,
    PAL_SCANCODE_SEMICOLON,
    PAL_SCANCODE_SLASH,
    PAL_SCANCODE_LBRACKET,
    PAL_SCANCODE_RBRACKET,
    PAL_SCANCODE_LSUPER,
    PAL_SCANCODE_RSUPER,

    PAL_SCANCODE_MAX
} PalScancode;

typedef enum {
    PAL_KEYCODE_UNKNOWN = 0,

    // Letters
    PAL_KEYCODE_A,
    PAL_KEYCODE_B,
    PAL_KEYCODE_C,
    PAL_KEYCODE_D,
    PAL_KEYCODE_E,
    PAL_KEYCODE_F,
    PAL_KEYCODE_G,
    PAL_KEYCODE_H,
    PAL_KEYCODE_I,
    PAL_KEYCODE_J,
    PAL_KEYCODE_K,
    PAL_KEYCODE_L,
    PAL_KEYCODE_M,
    PAL_KEYCODE_N,
    PAL_KEYCODE_O,
    PAL_KEYCODE_P,
    PAL_KEYCODE_Q,
    PAL_KEYCODE_R,
    PAL_KEYCODE_S,
    PAL_KEYCODE_T,
    PAL_KEYCODE_U,
    PAL_KEYCODE_V,
    PAL_KEYCODE_W,
    PAL_KEYCODE_X,
    PAL_KEYCODE_Y,
    PAL_KEYCODE_Z,

    // Numbers (top row)
    PAL_KEYCODE_0,
    PAL_KEYCODE_1,
    PAL_KEYCODE_2,
    PAL_KEYCODE_3,
    PAL_KEYCODE_4,
    PAL_KEYCODE_5,
    PAL_KEYCODE_6,
    PAL_KEYCODE_7,
    PAL_KEYCODE_8,
    PAL_KEYCODE_9,

    // Function
    PAL_KEYCODE_F1,
    PAL_KEYCODE_F2,
    PAL_KEYCODE_F3,
    PAL_KEYCODE_F4,
    PAL_KEYCODE_F5,
    PAL_KEYCODE_F6,
    PAL_KEYCODE_F7,
    PAL_KEYCODE_F8,
    PAL_KEYCODE_F9,
    PAL_KEYCODE_F10,
    PAL_KEYCODE_F11,
    PAL_KEYCODE_F12,

    // Control
    PAL_KEYCODE_ESCAPE,
    PAL_KEYCODE_ENTER,
    PAL_KEYCODE_TAB,
    PAL_KEYCODE_BACKSPACE,
    PAL_KEYCODE_SPACE,
    PAL_KEYCODE_CAPSLOCK,
    PAL_KEYCODE_NUMLOCK,
    PAL_KEYCODE_SCROLLLOCK,
    PAL_KEYCODE_LSHIFT,
    PAL_KEYCODE_RSHIFT,
    PAL_KEYCODE_LCTRL,
    PAL_KEYCODE_RCTRL,
    PAL_KEYCODE_LALT,
    PAL_KEYCODE_RALT,

    // Arrows
    PAL_KEYCODE_LEFT,
    PAL_KEYCODE_RIGHT,
    PAL_KEYCODE_UP,
    PAL_KEYCODE_DOWN,

    // Navigation
    PAL_KEYCODE_INSERT,
    PAL_KEYCODE_DELETE,
    PAL_KEYCODE_HOME,
    PAL_KEYCODE_END,
    PAL_KEYCODE_PAGEUP,
    PAL_KEYCODE_PAGEDOWN,

    // Keypad
    PAL_KEYCODE_KP_0,
    PAL_KEYCODE_KP_1,
    PAL_KEYCODE_KP_2,
    PAL_KEYCODE_KP_3,
    PAL_KEYCODE_KP_4,
    PAL_KEYCODE_KP_5,
    PAL_KEYCODE_KP_6,
    PAL_KEYCODE_KP_7,
    PAL_KEYCODE_KP_8,
    PAL_KEYCODE_KP_9,
    PAL_KEYCODE_KP_ENTER,
    PAL_KEYCODE_KP_ADD,
    PAL_KEYCODE_KP_SUBTRACT,
    PAL_KEYCODE_KP_MULTIPLY,
    PAL_KEYCODE_KP_DIVIDE,
    PAL_KEYCODE_KP_DECIMAL,
    PAL_KEYCODE_KP_EQUAL,

    // Misc
    PAL_KEYCODE_PRINTSCREEN,
    PAL_KEYCODE_PAUSE,
    PAL_KEYCODE_MENU,
    PAL_KEYCODE_APOSTROPHE,
    PAL_KEYCODE_BACKSLASH,
    PAL_KEYCODE_COMMA,
    PAL_KEYCODE_EQUAL,
    PAL_KEYCODE_GRAVEACCENT,
    PAL_KEYCODE_SUBTRACT,
    PAL_KEYCODE_PERIOD,
    PAL_KEYCODE_SEMICOLON,
    PAL_KEYCODE_SLASH,
    PAL_KEYCODE_LBRACKET,
    PAL_KEYCODE_RBRACKET,
    PAL_KEYCODE_LSUPER,
    PAL_KEYCODE_RSUPER,

    PAL_KEYCODE_MAX
} PalKeycode;

typedef enum {
    PAL_MOUSE_BUTTON_UNKNOWN = 0,

    PAL_MOUSE_BUTTON_LEFT,
    PAL_MOUSE_BUTTON_RIGHT,
    PAL_MOUSE_BUTTON_MIDDLE,
    PAL_MOUSE_BUTTON_X1,
    PAL_MOUSE_BUTTON_X2,

    PAL_MOUSE_BUTTON_MAX
} PalMouseButton;

PAL_API PalResult PAL_CALL palInitInput(
    const PalAllocator *allocator,
    PalEventDriver* eventDriver,
    bool autoFocusWindow);

PAL_API void PAL_CALL palShutdownInput();

PAL_API void PAL_CALL palUpdateInput();

PAL_API const bool* PAL_CALL palGetKeycodeState();

PAL_API const bool* PAL_CALL palGetScancodeState();

PAL_API const bool* PAL_CALL palGetMouseState();

PAL_API void PAL_CALL palGetMousePosition(
    Int32* x, 
    Int32* y);

PAL_API void PAL_CALL palGetMouseDelta(
    Int32* dx, 
    Int32* dy);

PAL_API void PAL_CALL palGetMouseWheelDelta(
    Int32* dx, 
    Int32* dy);

PAL_API void* PAL_CALL palGetInputWindow();

PAL_API void PAL_CALL palSetInputWindow( 
    void* windowHandle);

PAL_API void PAL_CALL palSetAutoFocusWindow( 
    bool enable);

#endif // _PAL_INPUT_H